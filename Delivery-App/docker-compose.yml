services:
  db:
    image: postgres:15-alpine
    container_name: delivery_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: delivery_app
    ports: ["5432:5432"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d delivery_app || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: delivery_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  rabbitmq:
    image: rabbitmq:3-management
    container_name: delivery_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Применяем миграции один раз перед запуском остальных сервисов
  migrate:
    build:
      context: .
      dockerfile: docker/app.Dockerfile
    container_name: delivery_migrate
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      PYTHONPATH: /app
      POSTGRES_HOST: db
      POSTGRES_PORT: "5432"
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: delivery_app
      REDIS_URL: redis://redis:6379/0
    command:
      - bash
      - -lc
      - alembic -c migrations/alembic.ini upgrade head
    restart: "no"

  api:
    build:
      context: .
      dockerfile: docker/app.Dockerfile
    container_name: delivery_api
    depends_on:
      migrate:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      PYTHONPATH: /app
      POSTGRES_HOST: db
      POSTGRES_PORT: "5432"
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: delivery_app
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      REDIS_URL: redis://redis:6379/0
    command: uvicorn bootstrap.asgi:app --host 0.0.0.0 --port 8000 --proxy-headers
    ports: ["8000:8000"]
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: docker/app.Dockerfile
    container_name: delivery_worker
    depends_on:
      migrate:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      PYTHONPATH: /app
      POSTGRES_HOST: db
      POSTGRES_PORT: "5432"
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: delivery_app
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      REDIS_URL: redis://redis:6379/0
    command:
      - bash
      - -lc
      - celery -A infrastructure.tasks.celery_app worker -l info -Q pricing,pricing-bulk,ops --hostname=delivery-worker@%h -E
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  scheduler:
    build:
      context: .
      dockerfile: docker/app.Dockerfile
    container_name: delivery_scheduler
    depends_on:
      migrate:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      PYTHONPATH: /app
      POSTGRES_HOST: db
      POSTGRES_PORT: "5432"
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: delivery_app
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      REDIS_URL: redis://redis:6379/0
    command:
      - bash
      - -lc
      - celery -A infrastructure.tasks.celery_app beat -l info
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  flower:
    build:
      context: .
      dockerfile: docker/app.Dockerfile
    container_name: delivery_flower
    depends_on:
      migrate:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      PYTHONPATH: /app
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      REDIS_URL: redis://redis:6379/0
    command:
      - bash
      - -lc
      - celery -A infrastructure.tasks.celery_app flower --port=5555 --persistent --db=/app/logs/flower.db
    volumes:
      - ./logs:/app/logs
    ports: ["5555:5555"]
    restart: unless-stopped

volumes:
  postgres_data:
