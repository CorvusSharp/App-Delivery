"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É package_types —Ç—Ä–µ–º—è —Ç–∏–ø–∞–º–∏ –ø–æ—Å—ã–ª–æ–∫ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(str(Path(__file__).parent.parent.parent))

from sqlalchemy import select, text
from sqlalchemy.dialects.postgresql import insert

from infrastructure.sqlalchemy.database import AsyncSessionLocal
from domain.entities.package_type import PackageType
from infrastructure.sqlalchemy.models import PackageTypeModel


async def init_package_types():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø—ã –ø–æ—Å—ã–ª–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã
    domain_types = PackageType.get_all_types()
    
    async with AsyncSessionLocal() as session:
        try:
            print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã –ø–æ—Å—ã–ª–æ–∫...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–∏–ø—ã —É–∂–µ –µ—Å—Ç—å –≤ –ë–î
            existing_types_result = await session.execute(
                select(PackageTypeModel.id, PackageTypeModel.name)
            )
            existing_types = {row.id: row.name for row in existing_types_result}
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∏–ø–æ–≤: {len(existing_types)}")
            for type_id, type_name in existing_types.items():
                print(f"   - {type_id}: {type_name}")
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã
            types_to_insert = []
            for domain_type in domain_types:
                if domain_type.id not in existing_types:
                    types_to_insert.append({
                        'id': domain_type.id,
                        'name': domain_type.name
                    })
                    print(f"‚ûï –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Ç–∏–ø: {domain_type.id} - {domain_type.name}")
                else:
                    print(f"‚úÖ –¢–∏–ø —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {domain_type.id} - {domain_type.name}")
            
            if types_to_insert:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL UPSERT (ON CONFLICT DO NOTHING)
                stmt = insert(PackageTypeModel).values(types_to_insert)
                stmt = stmt.on_conflict_do_nothing(index_elements=['id'])
                
                await session.execute(stmt)
                await session.commit()
                
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(types_to_insert)} —Ç–∏–ø–æ–≤ –ø–æ—Å—ã–ª–æ–∫")
            else:
                print("‚úÖ –í—Å–µ —Ç–∏–ø—ã –ø–æ—Å—ã–ª–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            final_result = await session.execute(
                select(PackageTypeModel.id, PackageTypeModel.name)
                .order_by(PackageTypeModel.id)
            )
            final_types = list(final_result)
            
            print(f"\nüìä –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–æ—Å—ã–ª–æ–∫ ({len(final_types)}):")
            for row in final_types:
                print(f"   - {row.id}: {row.name}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –ø–æ—Å—ã–ª–æ–∫: {e}")
            await session.rollback()
            raise


async def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(text("SELECT 1"))
            if result.scalar() == 1:
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
                return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not await check_database_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        sys.exit(1)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –ø–æ—Å—ã–ª–æ–∫
        await init_package_types()
        
        print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
